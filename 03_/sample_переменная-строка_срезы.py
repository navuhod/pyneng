# строка является упорядоченным типом данных, который (тип данных) позволяет обращаться к символам в строке по номеру, начиная с нуля
strok1 = 'interface FastEthernet1/0'
print('переменная strok1 =', strok1)
print('-'*60)
print('обращение к strok1[0],', 'результат обращения:', strok1[0])

# нумерация всех символов в строке идет с нуля. но, если нужно обратиться к какому-то по счету символу, начиная с конца, то можно
# указывать отрицательные значения (начиная с ЕДЕНИЦЫ)
print()
print('обращение к strok1[1],', 'результат обращения:', strok1[1])
print('обращение к strok1[-1],', 'результат обращения:', strok1[-1])

# кроме обращения к символу, можно делать срез строки, указав диапазон номеров (срез выполняется по второе число, не включая его)
print()
print('срез strok1[0:9],', 'результат среза:', strok1[0:9])
print('срез strok1[10:22],', 'результат среза:', strok1[10:22])

#если не указывать второе число, то срез будет до конца строки
print()
print('срез strok1[10:],', 'результат среза:', strok1[10:])

# срезать три последних символа строки
print()
print('срез strok1[-3:],', 'результат среза:', strok1[-3:])

# прочитать строку в прямом и обратном порядке
print()
print('срез strok1[::],', 'результат среза:', strok1[::])
print('срез strok1[:-1],', 'результат среза:', strok1[:-1])
print('срез strok1[::-1],', 'результат среза:', strok1[::-1])

# запись имя_переменной[::] и имя_переменной[:] дают одинаковый результат,
# но двойное двоеточие позволяет указывать через сколько элементов будет браться следующий символ
print()
print('обращение к strok1[::2],', 'результат обращения - каждый 2 элемент (четные элементы):', strok1[::2])
print('обращение к strok1[1::2],', 'результат обращения - каждый 2 элемент, в прямом порядке (нечетные элементы):', strok1[1::2])
print('обращение к strok1[-4::-3],', 'результат обращения - каждый 3 элемент, в обратном порядке начиная с 4 символа с конца:', strok1[-4::-3])
